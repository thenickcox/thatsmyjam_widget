// Generated by CoffeeScript 1.6.3
(function() {
  var $, Jam, req;

  $ = function(el) {
    return document.getElementById(el);
  };

  window.App = {};

  App.Errors = {
    noTemplateUrl: 'div with id "thisismyjam" must have a data-template-url property with the location of the Mustache template',
    noUsername: 'div with id "thisismyjam" must contain the desired thisismyjam username'
  };

  App.Templates = {};

  App.TemplateManager = function() {
    return {
      tmj: $('thisismyjam'),
      retrieveTemplate: function() {
        var req, templateUrl;
        if (!this.tmj.dataset.templateUrl) {
          throw new Error(App.Errors.noTemplateUrl);
        }
        req = new XMLHttpRequest();
        req.onload = function() {
          var script;
          script = document.createElement('script');
          script.innerHTML = this.responseText;
          return App.Templates.mustacheTemplate = script;
        };
        templateUrl = this.tmj.dataset.templateUrl;
        req.open('GET', templateUrl, {
          async: false
        });
        return req.send();
      }
    };
  };

  Jam = function(request) {
    return {
      initRequest: function() {
        var uName;
        if (!$('thisismyjam').dataset.templateUrl) {
          throw new Error(App.Errors.noUsername);
        }
        uName = $('thisismyjam').dataset.tmjUsername;
        return request.open('GET', "https://api.thisismyjam.com/1/" + uName + ".json", {
          async: false
        });
      },
      sendRequest: function() {
        this.initRequest();
        request.send();
        return this;
      },
      populateDom: function() {
        var self;
        self = this;
        return request.addEventListener('loadend', function() {
          var rendered, resp;
          if (this.status === 200 && this.response) {
            resp = self.responseAsJSON(this.response);
            rendered = Mustache.render(App.Templates.mustacheTemplate.innerHTML, resp);
            $('thisismyjam').innerHTML = rendered;
            self.reformatDate(resp);
          }
          if (resp.person.hasCurrentJam) {
            return $('noJam').innerHTML = '';
          } else {
            return $('hasJam').innerHTML = '';
          }
        });
      },
      responseAsJSON: function(resp) {
        return JSON.parse(resp);
      },
      reformatDate: function(resp) {
        var dateEl, newDate, _ref;
        dateEl = $('jam-creation-date');
        newDate = (_ref = resp.jam) != null ? _ref.creationDate.split(' ').slice(0, 4).join(' ') : void 0;
        return dateEl.innerHTML = newDate;
      }
    };
  };

  App.templateManager = new App.TemplateManager();

  App.templateManager.retrieveTemplate();

  req = new XMLHttpRequest();

  App.jam = new Jam(req);

  App.jam.sendRequest().populateDom();

}).call(this);
