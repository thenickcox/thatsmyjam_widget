// Generated by CoffeeScript 1.6.3
(function() {
  var $, App, TemplateManager, Templates, req, templateManager,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = function(el) {
    return document.getElementById(el);
  };

  Templates = {};

  TemplateManager = function() {
    return {
      tmj: $('thatsmyjam'),
      retrieveTemplate: function() {
        var req, templateUrl;
        req = new XMLHttpRequest();
        req.onload = function() {
          var div;
          div = document.createElement('div');
          div.innerHTML = this.responseText;
          return Templates.mustacheTemplate = div;
        };
        templateUrl = this.tmj.dataset.templateUrl;
        req.open('GET', templateUrl, {
          async: false
        });
        return req.send();
      }
    };
  };

  App = (function() {
    function App(request) {
      this.responseAsJSON = __bind(this.responseAsJSON, this);
      this.populateDom = __bind(this.populateDom, this);
      this.sendRequest = __bind(this.sendRequest, this);
      this.initRequest = __bind(this.initRequest, this);
      this.request = request;
    }

    App.prototype.initRequest = function() {
      var uName;
      uName = $('thatsmyjam').dataset.tmjUsername;
      return this.request.open('GET', "https://api.thisismyjam.com/1/" + uName + ".json", {
        async: false
      });
    };

    App.prototype.sendRequest = function() {
      this.initRequest();
      this.request.send();
      return this;
    };

    App.prototype.populateDom = function() {
      var self;
      self = this;
      return this.request.addEventListener('loadend', function() {
        var rendered, resp;
        if (this.status === 200 && this.response) {
          resp = self.responseAsJSON(this.response);
          rendered = Mustache.render(Templates.mustacheTemplate.innerHTML, resp);
          $('thatsmyjam').innerHTML = rendered;
          self.reformatDate(resp);
        }
        if (resp.person.hasCurrentJam) {
          return $('noJam').innerHTML = '';
        } else {
          return $('hasJam').innerHTML = '';
        }
      });
    };

    App.prototype.responseAsJSON = function(resp) {
      return JSON.parse(resp);
    };

    App.prototype.reformatDate = function(resp) {
      var dateEl, newDate, _ref;
      dateEl = $('jam-creation-date');
      newDate = (_ref = resp.jam) != null ? _ref.creationDate.split(' ').slice(0, 4).join(' ') : void 0;
      return dateEl.innerHTML = newDate;
    };

    return App;

  })();

  templateManager = new TemplateManager();

  templateManager.retrieveTemplate();

  req = new XMLHttpRequest();

  window.app = new App(req);

  window.app.sendRequest().populateDom();

}).call(this);
